## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Management'
description: |-
  **Note:** This endpoint requires an `Authorization: Bearer <access_token>` header.

  **Note:** You will get the access_token after User Login
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/userRegister
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Register a new user.'
      description: |-
        This endpoint registers a new user with the provided details.
        It requires a name, last name, email, and password, validates the input,
        and sends an email verification link if the registration is successful.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The first name of the user.'
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: 'The last name of the user.'
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The unique email of the user. Must be a valid email format.'
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for the user account. Must be at least 8 characters and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'
        required: true
        example: '`rUt^*ADQ}-uyZ=('
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: John
      last_name: Doe
      email: john.doe@example.com
      password: '`rUt^*ADQ}-uyZ=('
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
              "success": 1,
              "message": "User registered successfully. Visit Your email to Verify",
              "user": {
                  "id": 1,
                  "name": "John",
                  "last_name": "Doe",
                  "email": "john.doe@example.com",
                  "updated_at": "2024-11-14T12:00:00.000000Z",
                  "created_at": "2024-11-14T12:00:00.000000Z"
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
              "success": 0,
              "error": "Validation error message"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
              "success": 0,
              "message": "Error while Register",
              "error": "Detailed error message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/userLogin
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User Login'
      description: |-
        This endpoint authenticates a user with their email and password.
        It validates the credentials, checks if the user is verified, ensures they have the 'user' role,
        and returns an access token if successful.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password. Must be at least 8 characters, containing at least one uppercase letter, one lowercase letter, one number, and one special character."
        required: true
        example: 'VuPeQ]7z'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: john.doe@example.com
      password: 'VuPeQ]7z'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "success": 1,
              "user": {
                  "id": 1,
                  "name": "John",
                  "email": "john.doe@example.com",
                  "created_at": "2024-11-14T12:00:00.000000Z",
                  "updated_at": "2024-11-14T12:00:00.000000Z"
              },
              "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "token_type": "bearer",
              "expires_in": 3600
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "success": 0,
              "error": "Unauthorized Login Role. Only User can Login"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "success": 0,
              "error": "Password does not match"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "success": 0,
              "error": "Please Verify. Before Login"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "success": 0,
              "error": "Email does not exist"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
              "success": 0,
              "error": "Validation error message"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
              "success": 0,
              "message": "Error while Login",
              "error": "Detailed error message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/verified/{uniqueCode}'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify user by unique code.'
      description: "This endpoint verifies a user using a unique code. If the code is valid, the user's verification status is updated."
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uniqueCode:
        name: uniqueCode
        description: 'The unique code provided to verify the user.'
        required: true
        example: quos
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      uniqueCode: quos
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "success": 1,
             "message": "User successfully verified"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
             "success": 0,
             "message": "Not Found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/addUserProfile
    metadata:
      groupName: 'User Management'
      groupDescription: |-
        **Note:** This endpoint requires an `Authorization: Bearer <access_token>` header.

        **Note:** You will get the access_token after User Login
      subgroup: ''
      subgroupDescription: ''
      title: 'Add or update the user profile.'
      description: |-
        This endpoint allows an authenticated user to create or update their profile.
        If the profile exists, it will be updated with the provided details.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {access_token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_Number:
        name: user_Number
        description: "The user's phone number. Required if creating a profile, else optional."
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_Address:
        name: user_Address
        description: "The user's address. Required if creating a profile, else optional."
        required: false
        example: non
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_City:
        name: user_City
        description: "The user's city. Required if creating a profile, else optional."
        required: false
        example: qui
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_State:
        name: user_State
        description: "The user's state. Required if creating a profile, else optional."
        required: false
        example: explicabo
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_Country:
        name: user_Country
        description: "The user's country. Required if creating a profile, else optional."
        required: false
        example: delectus
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_PinCode:
        name: user_PinCode
        description: "The user's postal code. Required if creating a profile, else optional."
        required: false
        example: hic
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_AboutMe:
        name: user_AboutMe
        description: "The user's bio or description. Required if creating a profile, else optional."
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      user_Number: 2
      user_Address: non
      user_City: qui
      user_State: explicabo
      user_Country: delectus
      user_PinCode: hic
      user_AboutMe: consequatur
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
             "success": 1,
             "message": "Profile created successfully",
             "profile": {
                "user_id": 1,
                "user_Number": "1234567890",
                "user_Address": "123 Main St",
                "user_City": "New York",
                "user_State": "NY",
                "user_Country": "USA",
                "user_PinCode": "10001",
                "user_AboutMe": "Hello, I am a developer."
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
             "success": 0,
             "message": "Unauthorized, Login To Update Your Profile"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
             "errors": "Validation error message here"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/showUserProfile
    metadata:
      groupName: 'User Management'
      groupDescription: |-
        **Note:** This endpoint requires an `Authorization: Bearer <access_token>` header.

        **Note:** You will get the access_token after User Login
      subgroup: ''
      subgroupDescription: ''
      title: "Show the user's profile information."
      description: |-
        This endpoint allows an authenticated user to view their profile information.
        If the user profile doesn't exist, a message prompting them to create one is returned.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {access_token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "success": 1,
             "user": {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com"
             },
             "userprofile": {
                "user_id": 1,
                "user_Number": "1234567890",
                "user_Address": "123 Main St",
                "user_City": "New York",
                "user_State": "NY",
                "user_Country": "USA",
                "user_PinCode": "10001",
                "user_AboutMe": "Hello, I am a developer."
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
             "success": 1,
             "user": {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com"
             },
             "userprofile": "Please add your personal information in your profile"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
             "success": 0,
             "message": "Unauthorized, Login To Update Your Profile"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/userPasswordUpdate
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User Password'
      description: |-
        This endpoint allows an authenticated user to update their password. It checks if the old password is correct,
        verifies that the new password matches the confirmation password, and updates the password if all checks pass.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      old_password:
        name: old_password
        description: "The user's current password. Must be at least 8 characters."
        required: true
        example: OldPassword1!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: "The user's new password. Must be at least 8 characters, containing at least one uppercase letter, one lowercase letter, one number, and one special character."
        required: true
        example: NewPassword1!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      confirm_new_password:
        name: confirm_new_password
        description: 'Confirmation of the new password. Must match the new password.'
        required: true
        example: NewPassword1!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      old_password: OldPassword1!
      new_password: NewPassword1!
      confirm_new_password: NewPassword1!
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
              "message": "Password Updated Successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "error": "Old Password does not match"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "error": "Confirm New Password Should match with New Password"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "error": "Unauthorized"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
              "errors": {
                  "old_password": [
                      "The old password field is required."
                  ],
                  "new_password": [
                      "The new password must be at least 8 characters.",
                      "The new password must contain an uppercase letter, a lowercase letter, a number, and a special character."
                  ],
                  "confirm_new_password": [
                      "The confirm new password must match the new password."
                  ]
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
              "message": "Error while Updating User Profile",
              "error": "Detailed error message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
